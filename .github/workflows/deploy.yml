name: Deploy to Production

on:
  push:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Install pnpm
      uses: pnpm/action-setup@v2
      with:
        version: 10
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'pnpm'
    
    - name: Install dependencies
      run: pnpm install --frozen-lockfile
    
    - name: Run tests
      run: pnpm test
    
    - name: Build project
      run: pnpm build

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Deploy to production server
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USERNAME }}
        key: ${{ secrets.SSH_KEY }}
        port: ${{ secrets.PORT }}
        script: |
          set -e
          
          PROJECT_DIR=/opt/xid-website
          REPO_URL=https://github.com/xid-protocol/xid-website.git
          
          # 设置代理
          export http_proxy=http://127.0.0.1:20171
          export https_proxy=http://127.0.0.1:20171
          export no_proxy=localhost,127.0.0.1
          git config --global http.proxy $http_proxy || true
          git config --global https.proxy $https_proxy || true

          # 克隆或更新代码
          if [ ! -d "$PROJECT_DIR/.git" ]; then
            echo "[deploy] 克隆仓库到 $PROJECT_DIR ..."
            sudo mkdir -p $PROJECT_DIR
            sudo -E git clone --depth 1 $REPO_URL $PROJECT_DIR
            sudo chown -R $(whoami):$(whoami) $PROJECT_DIR
          else
            echo "[deploy] 更新代码..."
            cd $PROJECT_DIR
            git fetch --all
            git reset --hard origin/main
          fi
          
          # 进入项目目录
          cd $PROJECT_DIR
          
          # 停止现有服务
          cd docker
          docker compose down || true
          
          # 本地构建镜像
          echo "[deploy] 构建 Docker 镜像..."
          docker compose build --no-cache
          
          # 启动服务
          echo "[deploy] 启动服务..."
          docker compose up -d
          
          # 清理无用镜像
          docker image prune -f
          
          # 健康检查
          echo "[deploy] 等待服务启动..."
          sleep 30
          docker compose ps
          curl -f http://localhost:4321/ || exit 1
          
          echo "[deploy] 部署完成！" 