name: Deploy to Production

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Install pnpm
      uses: pnpm/action-setup@v2
      with:
        version: 10
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'pnpm'
    
    - name: Install dependencies
      run: pnpm install --frozen-lockfile
    
    - name: Run tests
      run: pnpm test
    
    - name: Build project
      run: pnpm build

  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    permissions:
      contents: read
      packages: write
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        file: docker/Dockerfile

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Deploy to production server
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USERNAME }}
        key: ${{ secrets.SSH_KEY }}
        port: ${{ secrets.PORT }}
        script: |
          set -e
          
          PROJECT_DIR=/opt/xid-website
          REPO_URL=https://github.com/xid-protocol/xid-website.git
          
          #proxy
          export http_proxy=http://127.0.0.1:20171
          export https_proxy=http://127.0.0.1:20171
          export no_proxy=localhost,127.0.0.1

          # configure git to use proxy
          git config --global http.proxy $http_proxy || true
          git config --global https.proxy $https_proxy || true

          # Clone the project on first deploy or update if it already exists
          if [ ! -d "$PROJECT_DIR/.git" ]; then
            echo "[deploy] Cloning repository to $PROJECT_DIR ..."
            sudo mkdir -p $PROJECT_DIR
            sudo -E git clone --depth 1 $REPO_URL $PROJECT_DIR
          else
            echo "[deploy] Updating existing repository ..."
            cd $PROJECT_DIR
            sudo -E git fetch --all
            sudo -E git reset --hard origin/main
          fi
          
          # Move into docker directory containing docker-compose.yml
          cd $PROJECT_DIR/docker
          
          # Authenticate to GHCR and pull latest images
          echo ${{ secrets.GITHUB_TOKEN }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin
          docker compose pull
          
          # Restart containers
          docker compose down
          docker compose up -d --remove-orphans
          
          # Cleanup dangling images
          docker image prune -f
          
          # Health check
          sleep 30
          docker compose ps
          curl -f http://localhost:8089/ || exit 1 